package com.example.scheduleme.Service.Repository;

import android.content.Context;
import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;

import androidx.lifecycle.MutableLiveData;
import com.example.scheduleme.Service.Databse.TaskDatabase;
import com.example.scheduleme.Service.Model.Task;

import java.util.List;

public class TaskRepository {

    private MutableLiveData<List<Task>> tasksLiveData;
    private static TaskRepository taskRepository;
    private List<Task> mTasks;
    TaskDatabase taskDatabase;
    Context context;

    private TaskRepository(Context context) {
        this.context=context;
    }

    public static synchronized TaskRepository getInstance(Context context) {
        if (taskRepository == null) {
            taskRepository = new TaskRepository(context);
        }
        return taskRepository;
    }

    public MutableLiveData<List<Task>> getAllTasksLiveData() {
        taskDatabase=TaskDatabase.getInstance(context);
        return  taskDatabase.getAllTasksLiveData();
    }
    public MutableLiveData<List<Task>> getOfficeTasksLiveData() {
        taskDatabase=TaskDatabase.getInstance(context);
        return  taskDatabase.getOfficeTasksLiveData();
    }
    public MutableLiveData<List<Task>> getExtraCurrTasksLiveData() {
        taskDatabase=TaskDatabase.getInstance(context);
        return  taskDatabase.getExtraCurrTasksLiveData();
    }
    public MutableLiveData<List<Task>> getHouseTasksLiveData() {
        taskDatabase=TaskDatabase.getInstance(context);
        return  taskDatabase.getHouseTasksLiveData();
    }
    public MutableLiveData<List<Task>> getLearningTasksLiveData() {
        taskDatabase=TaskDatabase.getInstance(context);
        return  taskDatabase.getLearningTasksLiveData();
    }
    public MutableLiveData<List<Task>> getDoneTasksLiveData() {
        taskDatabase=TaskDatabase.getInstance(context);
        return  taskDatabase.getDoneTasksLiveData();
    }

    public long insert_data(String selectTable, String title, String description, String dueDate){
        return  taskDatabase.insert_data(selectTable,title,description,dueDate);

    }

    public Boolean updateDatabase(String selectTable, long _id, String title, String description, String dueDate,int corrTabID,String corrTabName, boolean navigation_clicked) {
        return taskDatabase.updateDatabase(selectTable,_id,title,description,dueDate,corrTabID,corrTabName,navigation_clicked);
    }

    public Boolean deleteData(int id1, String title, String tableDesc, String dueDate, int id2, String corrTableName, boolean b) {
        return taskDatabase.deleteData(id1,title,tableDesc,dueDate,id2,corrTableName,b);
    }
    public void  DeleteFromDoneTaskTable(long id){
        taskDatabase.DeleteFromDoneTaskTable(id);
    }


    public int getLastAutoGeneratedKey(String tableName) {
            return taskDatabase.getLastAutoGeneratedKey(tableName);
    }

    public Cursor getInfo(String selectedTable){
        taskDatabase=TaskDatabase.getInstance(context);
        return taskDatabase.getInfo(selectedTable);
    }

    public Cursor dateBasedQuery(String selectedTable, String[] columns, String selection, String[] selectionArgs) {
        return taskDatabase.dateBasedQuery(selectedTable,columns,selection,selectionArgs);
    }
}
